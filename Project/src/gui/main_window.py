import tkinter as tk
from tkinter import ttk, filedialog
from PIL import Image, ImageTk
import cv2
import numpy as np
import os
from utils.generator import BloodCellGenerator
from models.ml_model import MLModel
from models.clustering_model import ClusteringModel
from models.cnn_model import CNNModel
from experiment_db import load_results
from preprocessing.filters import ImageFilters

class MainWindow:
    def __init__(self, root):
        self.root = root
        self.root.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–ª–µ—Ç–æ–∫ –∫—Ä–æ–≤–∏") # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        self.current_image = None
        self.setup_ui()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        data_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "data")
        self.generator = BloodCellGenerator(data_dir, image_size=(640, 640))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞
        self.ml_model = MLModel()
        self.clustering_model = ClusteringModel()
        self.cnn_model = CNNModel()
        
    def setup_ui(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        self.main_frame = ttk.Frame(self.root, padding="20")
        self.main_frame.grid(row=0, column=0, sticky="nsew") # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º —Ñ—Ä–µ–π–º –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        
        # –§—Ä–µ–π–º –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å)
        self.left_panel = ttk.Frame(self.main_frame)
        self.left_panel.grid(row=0, column=0, sticky="nsew", padx=(0, 10)) # –†–∞–∑–º–µ—â–∞–µ–º —Å–ª–µ–≤–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_frame = ttk.LabelFrame(self.left_panel, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", padding="10")
        self.image_frame.grid(row=0, column=0, sticky="nsew") # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤—Å—é –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å
        
        self.image_label = ttk.Label(self.image_frame)
        self.image_label.grid(row=0, column=0, padx=5, pady=5) # –†–∞–∑–º–µ—â–∞–µ–º –º–µ—Ç–∫—É –≤ —Ü–µ–Ω—Ç—Ä–µ —Ñ—Ä–µ–π–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        # –§—Ä–µ–π–º –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å)
        self.right_panel = ttk.Frame(self.main_frame)
        self.right_panel.grid(row=0, column=1, sticky="nsew") # –†–∞–∑–º–µ—â–∞–µ–º —Å–ø—Ä–∞–≤–∞
        
        # –°–µ–∫—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.load_section = ttk.LabelFrame(self.right_panel, text="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", padding="10")
        self.load_section.grid(row=0, column=0, sticky="ew", pady=(0, 10)) # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
        ttk.Button(self.load_section, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                  command=self.load_image).grid(row=0, column=0, padx=5, pady=5, sticky="ew") # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ttk.Button(self.load_section, text="üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                  command=self.generate_image).grid(row=1, column=0, padx=5, pady=5, sticky="ew") # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
        
        # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.filter_frame = ttk.LabelFrame(self.right_panel, text="–§–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏", padding="10")
        self.filter_frame.grid(row=1, column=0, sticky="ew", pady=(0, 10)) # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø
        
        self.filter_var = tk.StringVar() # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        filters = ["–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞", "–†–∞–∑–º—ã—Ç–∏–µ", "–†–µ–∑–∫–æ—Å—Ç—å", "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞"]
        self.filter_combo = ttk.Combobox(self.filter_frame, textvariable=self.filter_var, 
                                       values=filters, state="readonly", width=25) # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.filter_combo.grid(row=0, column=0, padx=5, pady=5)
        self.filter_combo.set(filters[0]) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        ttk.Button(self.filter_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", 
                  command=self.apply_filter).grid(row=1, column=0, padx=5, pady=5, sticky="ew") # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
        
        # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
        self.method_frame = ttk.LabelFrame(self.right_panel, text="–ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞", padding="10")
        self.method_frame.grid(row=2, column=0, sticky="ew", pady=(0, 10)) # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø
        
        self.method_var = tk.StringVar() # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        methods = ["–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ ML", "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è", "–°–≤—ë—Ä—Ç–æ—á–Ω–∞—è —Å–µ—Ç—å"]
        self.method_combo = ttk.Combobox(self.method_frame, textvariable=self.method_var, 
                                       values=methods, state="readonly", width=25) # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.method_combo.grid(row=0, column=0, padx=5, pady=5)
        self.method_combo.set(methods[0]) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
        ttk.Button(self.method_frame, text="üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", 
                  command=self.analyze_image).grid(row=1, column=0, padx=5, pady=5, sticky="ew") # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
        
        # –°–µ–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.result_frame = ttk.LabelFrame(self.right_panel, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", padding="10")
        self.result_frame.grid(row=3, column=0, sticky="ew", pady=(0, 10)) # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø
        
        self.result_label = ttk.Label(self.result_frame, text="", font=("Arial", 12)) # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.result_label.grid(row=0, column=0, padx=5, pady=5) # –†–∞–∑–º–µ—â–∞–µ–º –º–µ—Ç–∫—É
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
        ttk.Button(self.right_panel, text="üìä –¢–∞–±–ª–∏—Ü–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤", 
                  command=self.show_experiments_table).grid(row=4, column=0, padx=5, pady=5, sticky="ew") # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        self.main_frame.columnconfigure(0, weight=3) # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –ø–æ–ª—É—á–∞–µ—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å
        self.main_frame.columnconfigure(1, weight=1) # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ) –ø–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—å—à–∏–π –≤–µ—Å
        self.main_frame.rowconfigure(0, weight=1)
        self.left_panel.columnconfigure(0, weight=1)
        self.left_panel.rowconfigure(0, weight=1)
        self.image_frame.columnconfigure(0, weight=1)
        self.image_frame.rowconfigure(0, weight=1)
        
    def show_experiments_table(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
        df = load_results()
        window = tk.Toplevel(self.root) # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
        window.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤") # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        window.geometry("800x600") # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        container = ttk.Frame(window)
        container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10) # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –≤—Å–µ –æ–∫–Ω–æ
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç Treeview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
        tree = ttk.Treeview(container, columns=list(df.columns), show='headings')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ DataFrame
        for col in df.columns:
            tree.heading(col, text=col)
            tree.column(col, width=120, anchor='center') # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ DataFrame
        for _, row in df.iterrows():
            tree.insert('', tk.END, values=list(row)) # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ
        scrollbar_y = ttk.Scrollbar(container, orient=tk.VERTICAL, command=tree.yview)
        scrollbar_x = ttk.Scrollbar(container, orient=tk.HORIZONTAL, command=tree.xview)
        tree.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        tree.grid(row=0, column=0, sticky="nsew")
        scrollbar_y.grid(row=0, column=1, sticky="ns")
        scrollbar_x.grid(row=1, column=0, sticky="ew")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Å–∞ –¥–ª—è —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª–æ—Å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        container.columnconfigure(0, weight=1)
        container.rowconfigure(0, weight=1)
    
    def display_image(self, image):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ GUI"""
        if image is None:
            return
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ BGR (OpenCV) –≤ RGB (PIL)
        if len(image.shape) == 3 and image.shape[2] == 3:
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ—Ç–∫–µ
        height, width = image.shape[:2]
        max_size = 800 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
        if height > max_size or width > max_size:
            scale = max_size / max(height, width)
            new_width = int(width * scale)
            new_height = int(height * scale)
            image = cv2.resize(image, (new_width, new_height)) # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π Tkinter
        image = Image.fromarray(image) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º numpy array –≤ –æ–±—ä–µ–∫—Ç Image
        photo = ImageTk.PhotoImage(image=image) # –°–æ–∑–¥–∞–µ–º PhotoImage –æ–±—ä–µ–∫—Ç
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–µ—Ç–∫–µ
        self.image_label.configure(image=photo) # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π PhotoImage –º–µ—Ç–∫–µ
        self.image_label.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç PhotoImage, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞
    
    def load_image(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ."""
        file_path = filedialog.askopenfilename(
            filetypes=[("Image files", "*.png *.jpg *.jpeg *.bmp *.gif")] # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
        )
        if file_path:
            self.current_image = cv2.imread(file_path) # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OpenCV
            self.display_image(self.current_image) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    def generate_image(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –∫—Ä–æ–≤–∏."""
        self.current_image = self.generator.generate_image() # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.display_image(self.current_image) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    def apply_filter(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∫ —Ç–µ–∫—É—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é."""
        if self.current_image is None:
            return # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            
        filter_name = self.filter_var.get() # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        if filter_name == "–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞":
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            # –ù–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ display_image –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ self.current_image
            return
        
        image = self.current_image # –†–∞–±–æ—Ç–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if filter_name == "–†–∞–∑–º—ã—Ç–∏–µ":
            filtered = ImageFilters.blur(image)
        elif filter_name == "–†–µ–∑–∫–æ—Å—Ç—å":
            filtered = ImageFilters.sharpen(image)
        elif filter_name == "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞":
            filtered = ImageFilters.contrast(image)
        else:
            filtered = image # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.display_image(filtered) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        # –í–∞–∂–Ω–æ: –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω—è–ª–∏—Å—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ,
        # –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ self.current_image.
        # –ï—Å–ª–∏ –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é,
        # –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ.
        # –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
        self.current_image = filtered # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ
    
    def analyze_image(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º."""
        if self.current_image is None:
            return # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            
        method = self.method_var.get() # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
        count = 0 # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–ª–µ—Ç–æ–∫
        
        # try:
        # –í—ã–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
        if method == "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ ML":
            count = self.ml_model.predict(self.current_image)
        elif method == "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è":
            count = self.clustering_model.predict(self.current_image)
        elif method == "–°–≤—ë—Ä—Ç–æ—á–Ω–∞—è —Å–µ—Ç—å":
            count = self.cnn_model.predict(self.current_image)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞
        self.result_label.configure(
            text=f"–ù–∞–π–¥–µ–Ω–æ –∫–ª–µ—Ç–æ–∫: {count}", # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            font=("Arial", 12) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
        )
